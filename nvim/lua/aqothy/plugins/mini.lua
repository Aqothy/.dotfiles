return {
    -- {
    --     "echasnovski/mini.ai",
    --     event = { "BufReadPre", "BufNewFile" },
    --     opts = function()
    --         local ai = require("mini.ai")
    --         return {
    --             n_lines = 500,
    --             custom_textobjects = {
    --                 o = ai.gen_spec.treesitter({ -- code block
    --                     a = { "@block.outer", "@conditional.outer", "@loop.outer" },
    --                     i = { "@block.inner", "@conditional.inner", "@loop.inner" },
    --                 }),
    --                 f = ai.gen_spec.treesitter({ a = "@function.outer", i = "@function.inner" }), -- function
    --                 c = ai.gen_spec.treesitter({ a = "@class.outer", i = "@class.inner" }),       -- class
    --                 t = { "<([%p%w]-)%f[^<%w][^<>]->.-</%1>", "^<.->().*()</[^/]->$" },           -- tags
    --                 d = { "%f[%d]%d+" },                                                          -- digits
    --             },
    --         }
    --     end,
    --     config = function(_, opts)
    --         require("mini.ai").setup(opts)
    --     end,
    -- },
    -- {
    --     "echasnovski/mini.surround",
    --     version = false,
    --     event = { "BufReadPre", "BufNewFile" },
    --     opts = {}
    -- },
    -- {
    --     "echasnovski/mini.pairs",
    --     event = "InsertEnter",
    --     opts = {
    --         modes = { insert = true, command = true, terminal = false },
    --         -- skip autopair when next character is one of these
    --         skip_next = [=[[%w%%%'%[%"%.%`%$]]=],
    --         -- skip autopair when the cursor is inside these treesitter nodes
    --         skip_ts = { "string" },
    --         -- skip autopair when next character is closing pair
    --         -- and there are more closing pairs than opening pairs
    --         skip_unbalanced = true,
    --         -- better deal with markdown code blocks
    --         markdown = true,
    --     },
    -- }
}
