return {
	-- "hrsh7th/nvim-cmp",
	-- event = "InsertEnter",
	-- dependencies = {
	-- 	"hrsh7th/cmp-path", -- source for file system paths
	-- 	"L3MON4D3/LuaSnip",
	-- 	"saadparwaiz1/cmp_luasnip", -- for autocompletion
	-- 	"rafamadriz/friendly-snippets",
	-- 	"hrsh7th/cmp-buffer", -- source for text in buffer
	-- },
	-- config = function()
	-- 	local cmp = require("cmp")
	--
	-- 	local luasnip = require("luasnip")
	-- 	-- load vscode snippets
	-- 	require("luasnip.loaders.from_vscode").lazy_load()
	--
	-- 	local cmp_select = { behavior = cmp.SelectBehavior.Select }
	--
	-- 	cmp.setup({
	-- 		completion = {
	-- 			completeopt = "menu,menuone,preview,noselect",
	-- 		},
	-- 		snippet = { -- configure how nvim-cmp interacts with snippet engine
	-- 			expand = function(args)
	-- 				luasnip.lsp_expand(args.body)
	-- 			end,
	-- 		},
	--
	-- 		mapping = cmp.mapping.preset.insert({
	-- 			["<C-H>"] = cmp.mapping.abort(),
	-- 			["<C-p>"] = cmp.mapping.select_prev_item(cmp_select), -- previous suggestion
	-- 			["<C-n>"] = cmp.mapping.select_next_item(cmp_select), -- next suggestion
	-- 			["<C-Space>"] = cmp.mapping.complete(), -- show completion suggestions
	-- 			["<C-enter>"] = cmp.mapping.confirm({ select = true }),
	-- 			["<C-u>"] = cmp.mapping.scroll_docs(-4),
	-- 			["<C-d>"] = cmp.mapping.scroll_docs(4),
	-- 			["<C-e>"] = cmp.mapping(function(fallback)
	-- 				if require("luasnip").expandable() then
	-- 					require("luasnip").expand()
	-- 				else
	-- 					fallback()
	-- 				end
	-- 			end),
	-- 		}),
	-- 		-- sources for autocompletion
	-- 		sources = cmp.config.sources({
	-- 			{ name = "nvim_lsp" },
	-- 			{ name = "luasnip" }, -- snippets
	-- 			{ name = "buffer" }, -- text within current buffer
	-- 			{ name = "path" }, -- file system paths
	-- 		}),
	-- 	})
	-- end,
}
